---git config--

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

git init //create repository


--two steps to move the file to repository
git add filename1 filename2 //add file to repository
git commit -m "commit message"  //commit several add files with message

git status  //view change for now

git diff filename  //view the file diff 

git log

--go back to old version 
git reset --hard HEAD^ //HEAD^ HEAD^^ HEAD~100   head is now version
git reset --hard idnum  //idnum via git log or git reflog 

git reflog //show history command to get future id num

git diff HEAD --readme.txt //could see the workarea and repository diff

!! git checkout -- filename   //file via repository to workarea  must have --   fugai

!! git reset HEAD filename  //delete templator file,unstage file to workarea   --huitui


git rm  filename // to delete file

----github ssh access--
ssh-keygen -t rsa -C "email@163.com"

git remote add origin git@github.com:michaelliao/learngit.git  //guanlian remote github repository

git push -u origin master //push all files to origin master  new is add -u 

----------------------------------------
要关联一个远程库，git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

--------------------------------------
local clone

git clone git@github.com:tangxfei/gitskills  //clone the remote github repository

------------------------
git checkout -b dev   //creative fenzhi   git checkout -- filename 
    git branch dev  //
    git checkout dev 

git branch //show branch


-------------------------------------branck merge---
git merge dev    

git branch -b dev //delete branch 

Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>



-------------------------------------
git log --graph --pretty=oneline --abbrev-commit  //show dot graph

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

用git log --graph命令可以看到分支合并图。


